pipeline {
    agent any 
    tools {
        nodejs 'nodejs'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO1')
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
        SONAR_PROJECT_NAME = "frontend"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: 'main']],
                    userRemoteConfigs: [[url: 'https://github.com/michealken30/food-app.git',
                        credentialsId: 'GITHUB-APP']]])
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                dir('') {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=frontend \
                        -Dsonar.projectKey=frontend '''
                    }
                }
            }
        }


        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }
        // stage('OWASP Dependency-Check Scan') {
        //     steps {
        //         dir('/') {
        //             dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
        //             dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
        //         }
        //     }
        // }
        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/frontend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        stage("Docker Image Build") {
            steps {
                script {
                    dir('') {
                        sh 'docker system prune -f'
                        sh 'docker container prune -f'
                        sh 'docker build -t "$AWS_ECR_REPO_NAME" .' // Safe variable usage
                    }
                }
            }
        }
        stage("ECR Image Pushing") {
            steps {
                script {
                    withCredentials([string(credentialsId: 'ACCOUNT_ID', variable: 'AWS_ACCOUNT_ID'),
                                    string(credentialsId: 'ECR_REPO1', variable: 'AWS_ECR_REPO_NAME')]) {
                        sh '''
                        aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI
                        docker tag "$AWS_ECR_REPO_NAME" "$REPOSITORY_URI$AWS_ECR_REPO_NAME:$BUILD_NUMBER"
                        docker push "$REPOSITORY_URI$AWS_ECR_REPO_NAME:$BUILD_NUMBER"
                        '''
                    }
                }
            }
        }
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image "$REPOSITORY_URI$AWS_ECR_REPO_NAME:$BUILD_NUMBER" > trivyimage.txt' 
            }
        }
        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "food-app"
                GIT_USER_NAME = "michealken30"
            }
            steps {
                dir('Kubernetes-Manifests-file/Frontend') {
                    withCredentials([string(credentialsId: 'GITHUB-APP', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config user.email "kenneth.oshogwe@gmail.com"
                            git config user.name "michealken30"
                            BUILD_NUMBER=$BUILD_NUMBER
                            echo $BUILD_NUMBER
                            imageTag=$(grep -oP '(?<=frontend:)[^ ]+' deployment.yaml)
                            echo $imageTag
                            sed -i "s/$AWS_ECR_REPO_NAME:$imageTag/$AWS_ECR_REPO_NAME:$BUILD_NUMBER/" deployment.yaml
                            git add deployment.yaml
                            git commit -m "Update deployment Image to version $BUILD_NUMBER"
                            git push https://$GITHUB_TOKEN@github.com/$GIT_USER_NAME/$GIT_REPO_NAME HEAD:main
                        '''
                    }
                }
            }
        }
    }
}
